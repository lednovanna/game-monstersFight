

// –ò–≥—Ä–æ–∫
class Player {
    constructor(name) {
        this.name = name;
        this.health = 100;
        this.maxHealth = 100;
        this.strength = 20;
        this.level = 1;
        this.potions = 3;
        this.inventory = [];
    }

    // –∞—Ç–∞–∫–∞
    attack(monster) {
        const damage = Math.floor(Math.random() * this.strength) + 5;
        monster.health -= damage;
        logMessage(`${this.name} dealt ${damage} damage to ${monster.type}.`);
    }

    // –ª–µ—á–µ–Ω–∏–µ
    heal() {
        if (this.potions > 0) {
            const healAmount = Math.floor(Math.random() * 30) + 20;
            this.health = Math.min(this.health + healAmount, this.maxHealth); // Prevent overheal
            this.potions--;
            logMessage(`${this.name} restored ${healAmount} health. (Potions left: ${this.potions})`);
        } else {
            logMessage('‚ùå No potions left!');
        }
    }

    // –ø–µ—Ä–µ—Ö–æ–¥ –Ω–∞ –Ω–æ–≤—ã–π —É—Ä–æ–≤–µ–Ω—å
    levelUp() {
        this.level++;
        this.maxHealth += 30;
        this.health = this.maxHealth;
        this.strength += 10;
        logMessage(`üéâ ${this.name} leveled up to ${this.level}!`);
    }

    // –¥–æ–±–∞–≤–ª–µ–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
    addItem(item) {
        this.inventory.push(item);
        logMessage(`üì¶ ${this.name} found an item: ${item.name}!`);
    }

    // –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–æ—Ä—è
    useItem(index) {
        if (index >= 0 && index < this.inventory.length) {
            const item = this.inventory.splice(index, 1)[0];
            if (item.type === 'weapon') {
                this.strength += item.effect;
                logMessage(`‚öîÔ∏è ${this.name} used ${item.name} (+${item.effect} strength)!`);
            } else if (item.type === 'potion') {
                this.health = Math.min(this.health + item.effect, this.maxHealth);
                logMessage(`üíä ${this.name} drank ${item.name} (+${item.effect} health)!`);
            } else if (item.type === 'armor') {
                this.health = Math.min(this.health + item.effect, this.maxHealth);
                logMessage(`üõ°Ô∏è ${this.name} used ${item.name} (+${item.effect} health)!`);
            }
        } else {
            logMessage('‚ùå Invalid item choice.');
        }
    }
}

// –ú–æ–Ω—Å—Ç–µ—Ä
class Monster {
    constructor(type, health, strength) {
        this.type = type;
        this.health = health;
        this.maxHealth = health;
        this.strength = strength;
    }

    attack(player) {
        const damage = Math.floor(Math.random() * this.strength) + 5;
        player.health -= damage;
        logMessage(`${this.type} dealt ${damage} damage to ${player.name}.`);
    }
}


class Item {
    constructor(name, type, effect) {
        this.name = name;
        this.type = type;
        this.effect = effect;
    }
}


function updateHealthBar(element, currentHealth, maxHealth) {
    element.value = Math.max(0, currentHealth);
    element.max = maxHealth;
}


function updateUI() {
    document.getElementById('playerName').textContent = `${player.name} (Level: ${player.level})`;
    updateHealthBar(document.getElementById('playerHealth'), player.health, player.maxHealth);

    document.getElementById('monsterName').textContent = `${currentMonster.type}`;
    updateHealthBar(document.getElementById('monsterHealth'), currentMonster.health, currentMonster.maxHealth);
}


function logMessage(message) {
    const log = document.getElementById('gameLog');
    log.innerHTML += message + '<br>'; 
    log.scrollTop = log.scrollHeight;
}

// –≥–µ–Ω–µ—Ä–∞—Ü–∏—è —Ä–∞–Ω–¥–æ–º–Ω–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞
function getRandomMonster() {
    const monsters = [
        new Monster('Goblin', 50, 10),
        new Monster('Giant', 80, 15),
        new Monster('Dragon', 120, 20)
    ];
    return monsters[Math.floor(Math.random() * monsters.length)];
}


function getRandomItem() {
    const items = [
        new Item('Life Elixir', 'potion', 50),
        new Item('Hero‚Äôs Sword', 'weapon', 15),
        new Item('Shield of Protection', 'armor', 20)
    ];
    return items[Math.floor(Math.random() * items.length)];
}

//–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–∫–æ–Ω—á–∏–ª–∞—Å—å –ª–∏ –∏–≥—Ä–∞
function checkGameOver() {
    if (player.health <= 0) {
        logMessage('üíÄ Game Over. You lost!');
        disableButtons();
    }
}

// –î–µ–∫—Ç–∏–≤–∞—Ü–∏—è –∫–Ω–æ–ø–æ–∫ –µ—Å–ª–∏ –∏–≥—Ä–∞ –∑–∞–∫–æ–Ω—á–∏–Ω–∞
function disableButtons() {
    document.getElementById('attackBtn').disabled = true;
    document.getElementById('healBtn').disabled = true;
    document.getElementById('inventoryBtn').disabled = true;
}

// –ê—Ç–∞–∫–∏
document.getElementById('attackBtn').addEventListener('click', () => {
    if (player.health > 0 && currentMonster.health > 0) {
        player.attack(currentMonster);
        if (currentMonster.health <= 0) {
            logMessage(`üíÄ ${currentMonster.type} was defeated!`);
            player.levelUp();
            const item = getRandomItem();
            player.addItem(item);
            currentMonster = getRandomMonster();
            logMessage(`üëπ A new monster appears: ${currentMonster.type}!`);
        } else {
            currentMonster.attack(player);
        }
    }
    updateUI(); 
    checkGameOver();
});

// –õ–µ—á–µ–Ω–∏–µ
document.getElementById('healBtn').addEventListener('click', () => {
    player.heal();
    currentMonster.attack(player);
    updateUI(); 
    checkGameOver();
});

// –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è
document.getElementById('inventoryBtn').addEventListener('click', () => {
    if (player.inventory.length > 0) {
        const itemList = player.inventory.map((item, index) => `${index + 1}: ${item.name}`).join('\n');
        const choice = prompt(`Inventory:\n${itemList}\nEnter item number to use:`);

        const itemIndex = parseInt(choice, 10) - 1;
        if (!isNaN(itemIndex)) {
            player.useItem(itemIndex);
        } else {
            alert('‚ùå Enter a valid number!');
        }
    } else {
        alert('üì¶ Your inventory is empty!');
    }
    currentMonster.attack(player);
    updateUI(); 
    checkGameOver();
});

// –ù–∞—á–∞–ª–æ –∏–≥—Ä—ã
const player = new Player(prompt("Enter player's name:") || 'Hero');
let currentMonster = getRandomMonster();
logMessage(`üë§ ${player.name} encounters ${currentMonster.type}!`);
updateUI(); 

