// üë§ –ö–ª–∞—Å –ì—Ä–∞–≤—Ü—è 
/*
class Player {
    constructor(name) {
        this.name = name;
        this.health = 100;
        this.strength = 20;
        this.level = 1;
        this.potions = 3;
        this.inventory = [];
    }

    // ‚öîÔ∏è –ê—Ç–∞–∫–∞ –º–æ–Ω—Å—Ç—Ä–∞
    attack(monster) {
        const damage = Math.floor(Math.random() * this.strength) + 5;
        monster.health -= damage;
        logMessage(`${this.name} –∑–∞–≤–¥–∞–≤ ${damage} —à–∫–æ–¥–∏ ${monster.type}.`);
    }

    // üíä –õ—ñ–∫—É–≤–∞–Ω–Ω—è
    heal() {
        if (this.potions > 0) {
            const healAmount = Math.floor(Math.random() * 30) + 20;
            this.health += healAmount;
            this.potions--;
            logMessage(`${this.name} –≤—ñ–¥–Ω–æ–≤–∏–≤ ${healAmount} –∑–¥–æ—Ä–æ–≤'—è. (–õ—ñ–∫—ñ–≤ –∑–∞–ª–∏—à–∏–ª–æ—Å—å: ${this.potions})`);
        } else {
            logMessage('‚ùå –£ –≤–∞—Å –Ω–µ–º–∞—î –ª—ñ–∫—ñ–≤!');
        }
    }

    // üìä –ü—ñ–¥–≤–∏—â–µ–Ω–Ω—è —Ä—ñ–≤–Ω—è
    levelUp() {
        this.level++;
        this.health += 30;
        this.strength += 10;
        logMessage(`üéâ ${this.name} –ø—ñ–¥–Ω—è–≤—Å—è –Ω–∞ ${this.level} —Ä—ñ–≤–µ–Ω—å!`);
    }

    // üì¶ –î–æ–¥–∞–≤–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç—É
    addItem(item) {
        this.inventory.push(item);
        logMessage(`üì¶ ${this.name} –∑–Ω–∞–π—à–æ–≤ –ø—Ä–µ–¥–º–µ—Ç: ${item.name}!`);
    }

    // üìú –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è –ø—Ä–µ–¥–º–µ—Ç—É
    useItem(index) {
        if (index >= 0 && index < this.inventory.length) {
            const item = this.inventory.splice(index, 1)[0];
            if (item.type === 'weapon') {
                this.strength += item.effect;
                logMessage(`‚öîÔ∏è ${this.name} –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î ${item.name} (+${item.effect} —Å–∏–ª–∞)!`);
            } else if (item.type === 'potion') {
                this.health += item.effect;
                logMessage(`üíä ${this.name} –≤–∏–ø–∏–≤ ${item.name} (+${item.effect} –∑–¥–æ—Ä–æ–≤'—è)!`);
            } else if (item.type === 'armor') {
                this.health += item.effect;
                logMessage(`üõ°Ô∏è ${this.name} –≤–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É—î ${item.name} (+${item.effect} –∑–¥–æ—Ä–æ–≤'—è)!`);
            }
        } else {
            logMessage('‚ùå –ù–µ–≤—ñ—Ä–Ω–∏–π –≤–∏–±—ñ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞.');
        }
    }
}

// üëπ –ö–ª–∞—Å –ú–æ–Ω—Å—Ç—Ä–∞
class Monster {
    constructor(type, health, strength) {
        this.type = type;
        this.health = health;
        this.strength = strength;
    }

    attack(player) {
        const damage = Math.floor(Math.random() * this.strength) + 5;
        player.health -= damage;
        logMessage(`${this.type} –∑–∞–≤–¥–∞–≤ ${damage} —à–∫–æ–¥–∏ ${player.name}.`);
    }
}

// üß∞ –ö–ª–∞—Å –ü—Ä–µ–¥–º–µ—Ç–∞
class Item {
    constructor(name, type, effect) {
        this.name = name;
        this.type = type;
        this.effect = effect;
    }
}

   // üìä –û–Ω–æ–≤–ª–µ–Ω–Ω—è –∑–¥–æ—Ä–æ–≤'—è
   function updateHealthBar(element, currentHealth, maxHealth) {
    element.value = Math.max(0, currentHealth); // –ù–µ –¥–æ–∑–≤–æ–ª—è—î–º–æ –æ–ø—É—Å—Ç–∏—Ç–∏—Å—è –Ω–∏–∂—á–µ 0
    element.max = maxHealth;
}

// üìä –û–Ω–æ–≤–ª–µ–Ω–Ω—è —ñ–Ω—Ñ–æ—Ä–º–∞—Ü—ñ—ó –ø—Ä–æ –≥—Ä–∞–≤—Ü—è —ñ –º–æ–Ω—Å—Ç—Ä–∞
function updateUI() {
    document.getElementById('playerName').textContent = `${player.name} (–†—ñ–≤–µ–Ω—å: ${player.level})`;
    updateHealthBar(document.getElementById('playerHealth'), player.health, player.maxHealth);
    
    document.getElementById('monsterName').textContent = `${currentMonster.type}`;
    updateHealthBar(document.getElementById('monsterHealth'), currentMonster.health, currentMonster.maxHealth);
}


// üìú –§—É–Ω–∫—Ü—ñ—è –ª–æ–≥—É–≤–∞–Ω–Ω—è –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω—å
function logMessage(message) {
    const log = document.getElementById('gameLog');
    log.innerHTML += message + '<br>'; // –î–æ–¥–∞—î–º–æ <br> –¥–ª—è –Ω–æ–≤–æ–≥–æ —Ä—è–¥–∫–∞
    log.scrollTop = log.scrollHeight;  // –ê–≤—Ç–æ–ø—Ä–æ–∫—Ä—É—Ç–∫–∞ –¥–æ –æ—Å—Ç–∞–Ω–Ω—å–æ–≥–æ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è
}

// üé≤ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –º–æ–Ω—Å—Ç—Ä–∞
function getRandomMonster() {
    const monsters = [
        new Monster('–ì–æ–±–ª—ñ–Ω', 50, 10),
        new Monster('–í–µ–ª–µ—Ç–µ–Ω—å', 80, 15),
        new Monster('–î—Ä–∞–∫–æ–Ω', 120, 20)
    ];
    return monsters[Math.floor(Math.random() * monsters.length)];
}

// üé≤ –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –≤–∏–ø–∞–¥–∫–æ–≤–æ–≥–æ –ø—Ä–µ–¥–º–µ—Ç–∞
function getRandomItem() {
    const items = [
        new Item('–ï–ª—ñ–∫—Å–∏—Ä –∂–∏—Ç—Ç—è', 'potion', 50),
        new Item('–ú–µ—á –≥–µ—Ä–æ—è', 'weapon', 15),
        new Item('–ó–∞—Ö–∏—Å–Ω–∏–π —â–∏—Ç', 'armor', 20)
    ];
    return items[Math.floor(Math.random() * items.length)];
}

// üõë –ü–µ—Ä–µ–≤—ñ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏
function checkGameOver() {
    if (player.health <= 0) {
        logMessage('üíÄ –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞. –í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏!');
        disableButtons();
    }
}

// üî¥ –í–∏–º–∫–Ω—É—Ç–∏ –∫–Ω–æ–ø–∫–∏ –ø—ñ—Å–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –≥—Ä–∏
function disableButtons() {
    document.getElementById('attackBtn').disabled = true;
    document.getElementById('healBtn').disabled = true;
    document.getElementById('inventoryBtn').disabled = true;
}

// üïπÔ∏è –õ–æ–≥—ñ–∫–∞ –∞—Ç–∞–∫–∏
document.getElementById('attackBtn').addEventListener('click', () => {
    if (player.health > 0 && currentMonster.health > 0) {
        player.attack(currentMonster);
        if (currentMonster.health <= 0) {
            logMessage(`üíÄ ${currentMonster.type} –ø–µ—Ä–µ–º–æ–∂–µ–Ω–∏–π!`);
            player.levelUp();
            const item = getRandomItem();
            player.addItem(item);
            currentMonster = getRandomMonster();
            logMessage(`üëπ –ù–æ–≤–∏–π –º–æ–Ω—Å—Ç—Ä: ${currentMonster.type}!`);
        } else {
            currentMonster.attack(player);
        }
    }
    updateUI();
    checkGameOver();
});

// üíä –õ–æ–≥—ñ–∫–∞ –ª—ñ–∫—É–≤–∞–Ω–Ω—è
document.getElementById('healBtn').addEventListener('click', () => {
    player.heal();
    currentMonster.attack(player);
    updateUI();
    checkGameOver();
});

// üì¶ –í–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —ñ–Ω–≤–µ–Ω—Ç–∞—Ä—è
document.getElementById('inventoryBtn').addEventListener('click', () => {
    if (player.inventory.length > 0) {
        const itemList = player.inventory.map((item, index) => `${index + 1}: ${item.name}`).join('\n');
        const choice = prompt(`–Ü–Ω–≤–µ–Ω—Ç–∞—Ä:\n${itemList}\n–í–≤–µ–¥—ñ—Ç—å –Ω–æ–º–µ—Ä –ø—Ä–µ–¥–º–µ—Ç–∞ –¥–ª—è –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è:`);

        const itemIndex = parseInt(choice, 10) - 1;
        if (!isNaN(itemIndex)) {
            player.useItem(itemIndex);
        } else {
            alert('‚ùå –í–≤–µ–¥—ñ—Ç—å –∫–æ—Ä–µ–∫—Ç–Ω–∏–π –Ω–æ–º–µ—Ä!');
        }
    } else {
        alert('üì¶ –í–∞—à —ñ–Ω–≤–µ–Ω—Ç–∞—Ä –ø–æ—Ä–æ–∂–Ω—ñ–π!');
    }
    currentMonster.attack(player);
    updateUI();
    checkGameOver();
});

function checkGameOver() {
    if (player.health <= 0) {
        logMessage('üíÄ –ì—Ä–∞ –∑–∞–∫—ñ–Ω—á–µ–Ω–∞. –í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏!');
        disableButtons();
    }
}

// üìä –ü–æ—á–∞—Ç–æ–∫ –≥—Ä–∏
const player = new Player(prompt('–í–≤–µ–¥—ñ—Ç—å —ñ–º\'—è –≥—Ä–∞–≤—Ü—è:') || '–ì–µ—Ä–æ–π');
let currentMonster = getRandomMonster();
logMessage(`üë§ ${player.name} –∑—É—Å—Ç—Ä—ñ—á–∞—î ${currentMonster.type}!`);

*/

// üë§ Player Class
class Player {
    constructor(name) {
        this.name = name;
        this.health = 100;
        this.maxHealth = 100;
        this.strength = 20;
        this.level = 1;
        this.potions = 3;
        this.inventory = [];
    }

    // ‚öîÔ∏è Attack the monster
    attack(monster) {
        const damage = Math.floor(Math.random() * this.strength) + 5;
        monster.health -= damage;
        logMessage(`${this.name} dealt ${damage} damage to ${monster.type}.`);
    }

    // üíä Heal
    heal() {
        if (this.potions > 0) {
            const healAmount = Math.floor(Math.random() * 30) + 20;
            this.health = Math.min(this.health + healAmount, this.maxHealth); // Prevent overheal
            this.potions--;
            logMessage(`${this.name} restored ${healAmount} health. (Potions left: ${this.potions})`);
        } else {
            logMessage('‚ùå No potions left!');
        }
    }

    // üìä Level Up
    levelUp() {
        this.level++;
        this.maxHealth += 30;
        this.health = this.maxHealth;
        this.strength += 10;
        logMessage(`üéâ ${this.name} leveled up to ${this.level}!`);
    }

    // üì¶ Add an item to inventory
    addItem(item) {
        this.inventory.push(item);
        logMessage(`üì¶ ${this.name} found an item: ${item.name}!`);
    }

    // üìú Use an item
    useItem(index) {
        if (index >= 0 && index < this.inventory.length) {
            const item = this.inventory.splice(index, 1)[0];
            if (item.type === 'weapon') {
                this.strength += item.effect;
                logMessage(`‚öîÔ∏è ${this.name} used ${item.name} (+${item.effect} strength)!`);
            } else if (item.type === 'potion') {
                this.health = Math.min(this.health + item.effect, this.maxHealth);
                logMessage(`üíä ${this.name} drank ${item.name} (+${item.effect} health)!`);
            } else if (item.type === 'armor') {
                this.health = Math.min(this.health + item.effect, this.maxHealth);
                logMessage(`üõ°Ô∏è ${this.name} used ${item.name} (+${item.effect} health)!`);
            }
        } else {
            logMessage('‚ùå Invalid item choice.');
        }
    }
}

// üëπ Monster Class
class Monster {
    constructor(type, health, strength) {
        this.type = type;
        this.health = health;
        this.maxHealth = health;
        this.strength = strength;
    }

    attack(player) {
        const damage = Math.floor(Math.random() * this.strength) + 5;
        player.health -= damage;
        logMessage(`${this.type} dealt ${damage} damage to ${player.name}.`);
    }
}

// üß∞ Item Class
class Item {
    constructor(name, type, effect) {
        this.name = name;
        this.type = type;
        this.effect = effect;
    }
}

// üìä Update health bar
function updateHealthBar(element, currentHealth, maxHealth) {
    element.value = Math.max(0, currentHealth);
    element.max = maxHealth;
}

// üìä Update UI
function updateUI() {
    document.getElementById('playerName').textContent = `${player.name} (Level: ${player.level})`;
    updateHealthBar(document.getElementById('playerHealth'), player.health, player.maxHealth);

    document.getElementById('monsterName').textContent = `${currentMonster.type}`;
    updateHealthBar(document.getElementById('monsterHealth'), currentMonster.health, currentMonster.maxHealth);
}

// üìú Log messages
function logMessage(message) {
    const log = document.getElementById('gameLog');
    log.innerHTML += message + '<br>'; // Ensuring new lines
    log.scrollTop = log.scrollHeight;
}

// üé≤ Generate a random monster
function getRandomMonster() {
    const monsters = [
        new Monster('Goblin', 50, 10),
        new Monster('Giant', 80, 15),
        new Monster('Dragon', 120, 20)
    ];
    return monsters[Math.floor(Math.random() * monsters.length)];
}

// üé≤ Generate a random item
function getRandomItem() {
    const items = [
        new Item('Life Elixir', 'potion', 50),
        new Item('Hero‚Äôs Sword', 'weapon', 15),
        new Item('Shield of Protection', 'armor', 20)
    ];
    return items[Math.floor(Math.random() * items.length)];
}

// üõë Check if game is over
function checkGameOver() {
    if (player.health <= 0) {
        logMessage('üíÄ Game Over. You lost!');
        disableButtons();
    }
}

// üî¥ Disable buttons after game over
function disableButtons() {
    document.getElementById('attackBtn').disabled = true;
    document.getElementById('healBtn').disabled = true;
    document.getElementById('inventoryBtn').disabled = true;
}

// üïπÔ∏è Attack logic
document.getElementById('attackBtn').addEventListener('click', () => {
    if (player.health > 0 && currentMonster.health > 0) {
        player.attack(currentMonster);
        if (currentMonster.health <= 0) {
            logMessage(`üíÄ ${currentMonster.type} was defeated!`);
            player.levelUp();
            const item = getRandomItem();
            player.addItem(item);
            currentMonster = getRandomMonster();
            logMessage(`üëπ A new monster appears: ${currentMonster.type}!`);
        } else {
            currentMonster.attack(player);
        }
    }
    updateUI(); // Ensure health bars update
    checkGameOver();
});

// üíä Healing logic
document.getElementById('healBtn').addEventListener('click', () => {
    player.heal();
    currentMonster.attack(player);
    updateUI(); // Ensure health bars update
    checkGameOver();
});

// üì¶ Inventory usage
document.getElementById('inventoryBtn').addEventListener('click', () => {
    if (player.inventory.length > 0) {
        const itemList = player.inventory.map((item, index) => `${index + 1}: ${item.name}`).join('\n');
        const choice = prompt(`Inventory:\n${itemList}\nEnter item number to use:`);

        const itemIndex = parseInt(choice, 10) - 1;
        if (!isNaN(itemIndex)) {
            player.useItem(itemIndex);
        } else {
            alert('‚ùå Enter a valid number!');
        }
    } else {
        alert('üì¶ Your inventory is empty!');
    }
    currentMonster.attack(player);
    updateUI(); // Ensure health bars update
    checkGameOver();
});

// üìä Start game
const player = new Player(prompt("Enter player's name:") || 'Hero');
let currentMonster = getRandomMonster();
logMessage(`üë§ ${player.name} encounters ${currentMonster.type}!`);
updateUI(); // Ensure UI updates at the start

